"use client";

import { useState, useEffect } from "react";
import { TextGenerateEffect } from "../../components/ui/text-generate-effect";
import StartChapter from "@/components/ui/startChapter";
import { motion } from "framer-motion";
import { ChevronDown } from "lucide-react";

const lessons = [
  "A very strange light was visible on the earthling sky. What was mistaken by a “guest star” it was indeed the supernova that originated this remarkable nebula",
  "In order to help understand the supernova remnant’s origins James Webb newly captured channels helped us to better identify the elements that compose the fragments of the past blast",
  "The Red components represent dust emissions not visible before. In Green is possible to identify the regions of doubly ionized sulfur that, when overlapped with dust, create yellow-white regions",
  "Lastly, in Blue, it’s possible to identify the  ghostly synchrotron emission generated by the neutron rotating star at the center of the nebula",
];

function CrabInteractiveChapter() {
  const [dustButtonClicked, setDustButtonClicked] = useState(false);
  const [sulfurButtonClicked, setSulfurButtonClicked] = useState(false);
  const [synchrotronButtonClicked, setSynchrotronButtonClicked] =
    useState(false);

  const handleButtonClick = () => {
    setDustButtonClicked(false);
    setSulfurButtonClicked(false);
    setSynchrotronButtonClicked(false);
  };
  function ElementButton({
    text,
    color,
    clicked,
    setClicked,
  }: {
    text: string;
    color: string;
    clicked: boolean;
    setClicked: (value: boolean) => void;
  }) {
    return (
      <button
        onClick={() => {
          handleButtonClick();
          setClicked(!clicked);
        }}
        className={`hover:underline flex-1 text-center ${
          clicked
            ? `text-[${color}] border-2 border-[${color}] rounded-full`
            : ""
        }`}
        style={clicked ? { color, borderColor: color } : {}}
      >
        {text}
      </button>
    );
  }

  return (
    <div className="relative w-screen h-screen overflow-hidden">
      <img
        src={
          dustButtonClicked
            ? "/crab/Dust.jpg"
            : sulfurButtonClicked
            ? "/crab/Sulfur.jpg"
            : synchrotronButtonClicked
            ? "/crab/Synchrotron.jpg"
            : "/crab/Full.jpg"
        }
        alt="Fullscreen background image"
        className="absolute inset-0 w-full h-full object-cover"
      />
      <div className="absolute inset-0 flex items-end justify-center text-[#ECECEC]">
        <div className="w-full h-1/3 bg-gradient-to-t from-[rgba(0,0,0,0.8)] via-[rgba(0,0,0,0.5)] to-transparent flex items-end justify-center px-16 py-8">
          <div className="text-center</div> w-full">
            <div className="flex justify-between w-full text-4xl font-alata">
              <ElementButton
                text="DUST"
                color="#CA5A8D"
                clicked={dustButtonClicked}
                setClicked={setDustButtonClicked}
              ></ElementButton>
              <ElementButton
                text="IONIZED SULFUR"
                color="#C5E97F"
                clicked={sulfurButtonClicked}
                setClicked={setSulfurButtonClicked}
              ></ElementButton>
              <ElementButton
                text="SYNCHROTRON"
                color="#45A5FE"
                clicked={synchrotronButtonClicked}
                setClicked={setSynchrotronButtonClicked}
              ></ElementButton>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

function CrabLessonChapter({
  currentClickQtt,
  clickable,
}: {
  currentClickQtt: number;
  clickable: boolean;
}) {
  console.log("currentClickQtt", currentClickQtt);
  console.log("lessons[currentClickQtt - 1]", lessons[currentClickQtt - 1]);
  return (
    <div className="relative w-screen h-screen overflow-hidden">
      <img
        src="/crab/Full.jpg"
        alt="Fullscreen background image"
        className="absolute inset-0 w-full h-full object-cover"
      />
      <div className="absolute inset-0 flex items-end justify-center text-[#ECECEC]">
        <div className="w-full h-1/3 bg-gradient-to-t from-[rgba(0,0,0,0.8)] via-[rgba(0,0,0,0.5)] to-transparent flex items-end justify-center px-16 py-8">
          <div className="text-center">
            <TextGenerateEffect words={lessons[currentClickQtt - 1]} />
          </div>
        </div>
      </div>
      {clickable && (
        <motion.div
          className="absolute bottom-4 right-4 text-white"
          animate={{
            y: [0, -10, 0],
          }}
          transition={{
            duration: 1,
            repeat: Infinity,
            repeatType: "reverse",
          }}
        >
          <ChevronDown size={32} />
        </motion.div>
      )}
    </div>
  );
}

export default function Page() {
  const [clickQtt, setClickQtt] = useState(0);
  const [clickable, setClickable] = useState(false);

  useEffect(() => {
    const timer = setTimeout(() => {
      setClickable(true);
    }, 3000);

    return () => clearTimeout(timer);
  }, []);

  useEffect(() => {
    const handleClick = () => {
      if (clickable) {
        setClickQtt((prev) => prev + 1);
        setClickable(false);
        const timer = setTimeout(() => {
          setClickable(true);
        }, 3000);

        return () => clearTimeout(timer);
      }
    };

    document.addEventListener("click", handleClick);

    return () => {
      document.removeEventListener("click", handleClick);
    };
  }, [clickable]);

  return (
    <div onClick={() => setClickQtt(clickQtt)}>
      {clickQtt === 0 ? (
        <StartChapter chapterNumber="III" chapterTitle="CRAB NEBULA" />
      ) : clickQtt <= lessons.length ? (
        <CrabLessonChapter currentClickQtt={clickQtt} clickable={clickable} />
      ) : (
        <CrabInteractiveChapter />
      )}
    </div>
  );
}
